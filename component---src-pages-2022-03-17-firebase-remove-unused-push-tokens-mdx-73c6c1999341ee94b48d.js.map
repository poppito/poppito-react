{"version":3,"sources":["webpack:///./src/pages/2022-03-17-Firebase-remove-unused-push-tokens.mdx","webpack:///./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"names":["_frontmatter","layoutProps","MDXContent","components","props","mdxType","className","href","smooth","duration","parentName","isMDXComponent","_objectWithoutPropertiesLoose","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf"],"mappings":"iPAOaA,EAAe,CAC1B,KAAQ,wDACR,MAAS,gDACT,KAAQ,yBACR,WAAc,QAEVC,EAAc,CAClBD,gBAGa,SAASE,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,iBACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,mBAAKC,UAAU,YACf,iBAAGC,KAAM,QAASC,QAAM,EAACC,SAAU,KAClC,SAGD,mBAAKH,UAAU,YACb,iEACA,uBACA,uBACA,oHACA,sBACE,kBAAII,WAAW,MAAf,6EACA,kBAAIA,WAAW,MAAf,kDACA,kBAAIA,WAAW,MAAf,2JAEF,+TAEA,uJACA,uBAAK,oBAAMA,WAAW,OAAjB,udAWL,gOAEA,iDAMNR,EAAWS,gBAAiB,G,kCC3Db,SAASC,EAA8BC,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IAEIE,EAAKC,EAFLC,EAAS,GACTC,EAAaC,OAAOC,KAAKP,GAG7B,IAAKG,EAAI,EAAGA,EAAIE,EAAWG,OAAQL,IACjCD,EAAMG,EAAWF,GACbF,EAASQ,QAAQP,IAAQ,IAC7BE,EAAOF,GAAOF,EAAOE,IAGvB,OAAOE,EAZT","file":"component---src-pages-2022-03-17-firebase-remove-unused-push-tokens-mdx-73c6c1999341ee94b48d.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"slug\": \"2022-03-17-invalidating-firebase-push-tokens-silently\",\n  \"title\": \"Removing unused Firebase push tokens silently\",\n  \"date\": \"2022-03-17 21:30 +1100\",\n  \"categories\": \"blog\"\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <div className=\"blogpage\">\n    <a href={\"/blog\"} smooth duration={1000}>\n    {\"Back\"}\n    </a>\n    </div>\n    <div className=\"blogText\">\n      <h1>{`Removing Firebase push tokens silently.`}</h1>\n      <br />\n      <br />\n      <p>{`Push messaging in modern mobile apps with Firebase is really common. The usual workflow is:`}</p>\n      <ul>\n        <li parentName=\"ul\">{`Integrating Firebase push SDKs / Cocoapods / SPM packages within the app.`}</li>\n        <li parentName=\"ul\">{`Registering a project on the Firebase console.`}</li>\n        <li parentName=\"ul\">{`On native apps, configuring the Firebase library, requesting for notification permissions, obtaining push tokens and saving them to a backend service.`}</li>\n      </ul>\n      <p>{`A lot of apps obtain push tokens at login (an optimal way of doing this is by requesting the current token from Firebase's local cache). Apps that support multiple users / login, usually also invalidate tokens on logout.\nBut what if the user never logs out, but removes / uninstall the app? ü§î`}</p>\n      <p>{`The best way to invalidate these tokens, unfortunately is by looking for errors when a push message is sent outbound, like so:`}</p>\n      <pre><code parentName=\"pre\" {...{}}>{`admin.messaging().sendToDevice(tokens, message, options)\n    .then((response) => {\n        console.log('Successfully sent message:', response);\n    }).catch((error) => {\n        if (error.code === 'messaging/invalid-registration-token' ||\n            error.code === 'messaging/registration-token-not-registered') {\n            //a promise here to delete the token which can be pushed to an array,\n            //then return promise.all üëç\n        }\n    });\n`}</code></pre>\n      <p>{`This is however problematic in apps that a) don't want to send out bulk outbound notifications and b) only support async notifications ie. notifications that go out when the\nuser performs an action.`}</p>\n      <p>{`There's a better way! `}</p>\n    </div>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"sourceRoot":""}