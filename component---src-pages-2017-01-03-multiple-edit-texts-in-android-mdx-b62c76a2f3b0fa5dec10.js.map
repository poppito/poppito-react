{"version":3,"sources":["webpack:///./src/pages/2017-01-03-Multiple-EditTexts-in-Android.mdx","webpack:///./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"names":["_frontmatter","layoutProps","MDXContent","components","props","mdxType","className","align","src","three","width","parentName","isMDXComponent","_objectWithoutPropertiesLoose","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf"],"mappings":"qQAQaA,EAAe,CAC1B,KAAQ,2CACR,MAAS,gCACT,KAAQ,2BACR,WAAc,QAEVC,EAAc,CAClBD,gBAGa,SAASE,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,iBACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,mBAAKC,UAAU,YACb,uDACA,0MACA,iBAAGC,MAAM,UACP,mBAAKC,IAAKC,IAAOC,MAAM,QADzB,KAGA,oGACA,qGACA,uBAAK,oBAAMC,WAAW,OAAjB,oZAWL,wTACA,uBAAK,oBAAMA,WAAW,OAAjB,ycAiBL,0XACA,uBAAK,oBAAMA,WAAW,OAAjB,qRASL,8NAMNT,EAAWU,gBAAiB,G,kCC7Eb,SAASC,EAA8BC,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IAEIE,EAAKC,EAFLC,EAAS,GACTC,EAAaC,OAAOC,KAAKP,GAG7B,IAAKG,EAAI,EAAGA,EAAIE,EAAWG,OAAQL,IACjCD,EAAMG,EAAWF,GACbF,EAASQ,QAAQP,IAAQ,IAC7BE,EAAOF,GAAOF,EAAOE,IAGvB,OAAOE,EAZT","file":"component---src-pages-2017-01-03-multiple-edit-texts-in-android-mdx-b62c76a2f3b0fa5dec10.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport three from './images/3.png';\nexport const _frontmatter = {\n  \"slug\": \"2017-01-03-Multiple-EditTexts-in-Android\",\n  \"title\": \"Multiple EditTexts in Android\",\n  \"date\": \"2017-01-03T00:00:00.000Z\",\n  \"categories\": \"post\"\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <div className=\"blogText\">\n      <h1>{`Multiple EditTexts in Android`}</h1>\n      <p>{`Often times there is a necessity for an app to display multiple EditText inputs. For example, lets take a look at this screen in my application Orderise (since been unpublished)`}</p>\n      <p align=\"center\">\n        <img src={three} width=\"30%\" />;\n      </p>\n      <p>{`There are two EditText input boxes namely, a special_orders and a name box.`}</p>\n      <p>{`It is possible to have a single TextWatcher for multiple EditTexts, like so:`}</p>\n      <pre><code parentName=\"pre\" {...{}}>{`\\`\\`\\`\n//first define each EditText\nEditText nameText = (EditText) findViewById(R.id.name);\nEditText specialOrders = (EditText) findViewById(R.id.special_instructions);\n\n//Next add textwatchers for each editText. You will need to get the activity or fragment that contains them to implement TextWatcher\nnameText.addTextChangedListener(this);\nspecial_orders.addTextChangedListener(this);\n\n\\`\\`\\`\n`}</code></pre>\n      <p>{`Now, this is where it gets interesting. You see, if this were multiple Buttons for a single OnClickListener, it would be easy as pie - just get the activity to implement the OnClickListener and then look for each Button's Id to be able to detect which button was clicked. Something like:`}</p>\n      <pre><code parentName=\"pre\" {...{}}>{`Button button1 = (Button) findViewById(R.id.button1);\nButton button2 = (Button) findViewById(R.id.button2);\nbutton1.setOnClickListener(this);\nbutton2.setOnClickListener(this);\n\n@Override\npublic void onClick(View v) {\n    switch (v.getId()) {\n        case R.id.button1: {\n            //do something useful here.\n            }\n        case R.id.button2: {\n            //do something else useful here.\n            break;\n        }\n      }\n`}</code></pre>\n      <p>{`But unfortunately, with TextWatcher we do not have the luxury of the the View object being passed into the Overridden methods of beforeTextChanged, onTextChanged and afterTextChanged. But there is still a way. For example, in the afterTextChanged method, we can compare the hashCode for the Editable Object with the Text in the EditText object, like so:`}</p>\n      <pre><code parentName=\"pre\" {...{}}>{`@Override\npublic void afterTextChanged(Editable s) {\n  if (s.hashCode() == nameText.getText().hashCode()) {\n      //Do else something with input.\n  } else if (s.hashCode() == specialOrders.getText().hashCode()) {\n      //Do something else useful with input.\n  }\n}\n`}</code></pre>\n      <p>{`There are of course a few other ways - one is to subclass the EditText Class and then pass the EditText View object into the three methods. But I believe the solution above is a bit more elegant.`}</p>\n    </div>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"sourceRoot":""}